apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-proxy-conf
data:
  default.conf: |
    upstream jenkins {
      server jenkins:8000;
    }
    server {
        listen       80;
        listen  [::]:80;
        server_name  default_server;
        #return 301 https://$host$request_uri;

        location / {
            root   /usr/share/nginx/html;
            index  index.html index.htm;
        }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }

        location /jen/ {
          sendfile off;
          proxy_pass http://jenkins/;
          proxy_set_header   Host $host;
          proxy_http_version 1.1;
          # Required for Jenkins websocket agents
          proxy_set_header   Connection        $connection_upgrade;
          proxy_set_header   Upgrade           $http_upgrade;

          proxy_set_header   Host              $host;
          proxy_set_header   X-Real-IP         $remote_addr;
          proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;
          proxy_set_header   X-Forwarded-Proto $scheme;
          proxy_max_temp_file_size 0;

          #this is the maximum upload size
          client_max_body_size       10m;
          client_body_buffer_size    128k;

          proxy_connect_timeout      90;
          proxy_send_timeout         90;
          proxy_read_timeout         90;
          proxy_buffering            off;
          proxy_request_buffering    off; # Required for HTTP CLI commands
          proxy_set_header Connection ""; # Clear for keepalive
        }
        location /grafana {
          proxy_pass http://grafana;
          rewrite  ^/grafana/(.*)  /$1 break;
          proxy_set_header   Host $host;
        }
        location /prometheus {
          proxy_pass http://prometheus;
          #rewrite  ^/prometheus/(.*)  /$1 break;
          proxy_set_header Authorization "Basic ";
          proxy_set_header   Host $host;
        }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  selector:
    matchLabels:
      app: nginx
  replicas: 1 # tells deployment to run 2 pods matching the template
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:latest
        ports:
        - containerPort: 80
        volumeMounts:
        - mountPath: /etc/nginx/conf.d/ # mount nginx-proxy-conf volumn to /etc/nginx/conf.d
          readOnly: true
          name: nginx-proxy-conf
      volumes:
      - name: nginx-proxy-conf
        configMap:
          name: nginx-proxy-conf # place ConfigMap `nginx-proxy-conf` on /etc/nginx/conf.d/
          items:
            - key: default.conf
              path: default.conf # dig directory
---
kind: Service
apiVersion: v1
metadata:
  name: nginx-service
spec:
  type: ClusterIP
  selector:
    app: nginx
  ports:
    - port: 80
      targetPort: 80
